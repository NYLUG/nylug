<?php

include_once('recruiter_resume.features.inc');


/**
 * Implements hook_profile2_access().
 */
function recruiter_resume_profile2_access($op, $profile = NULL, $account = NULL) {
  $account = isset($account) ? $account : $GLOBALS['user'];

  // Deny access to other resumes if it is not in state visible.
  if ($op == "view" && isset($profile) && $profile->type == "resume" && $profile->uid != $account->uid && recruiter_resume_get_state($profile) != 'visible') {
    return FALSE;
  }
}

/**
 * Implements hook_theme().
 */
function recruiter_resume_theme() {
  return array(
    // Register the template specific for the resume profile.
    'profile2__resume' => array(
      'render element' => 'elements',
      'template' => 'profile2--resume',
    ),
    // Register the template specific for the resume profile teaser.
    'profile2__resume__teaser' => array(
      'render element' => 'elements',
      'template' => 'profile2--resume--teaser',
    ),
    // Register the template specific for the resume education field collection item.
    'field_collection_item__field_resume_education' => array(
      'render element' => 'elements',
      'template' => 'field-collection-item--field-resume-education',
    ),
    // Register the template specific for the resume xp field collection item.
    'field_collection_item__field_resume_xp' => array(
      'render element' => 'elements',
      'template' => 'field-collection-item--field-resume-xp',
    ),
    // Theme function for resume state info block output.
    'recruiter_resume_get_state_info_box' => array(
      'variables' => array('state' => NULL, 'state_info' => NULL, 'link' => NULL),
    ),
  );
}

/**
 * Returns a list of resume fields (usually field collections) that remain
 * invisible for normal recruiter users. In special cases (e.g. the recruiter
 * user received an application), modules may allow view access, using
 * hook_recruiter_resume_private_fields_view_access().
 *
 * Profile2's private field setting cannot be used for this purpose, as they
 * always return FALSE for private fields and other modules cannot alter it.
 *
 * By default, the personal info and the attachment field collections are
 * private. The information can be altered in the admin settings and is then
 * saved in the variable 'recruiter_resume_private_fields'.
 */
function recruiter_resume_private_fields() {
  $defaults = array(
    'field_resume_attachments',
    'field_resume_personal_info',
  );
  return variable_get('recruiter_resume_private_fields', $defaults);

}

/**
 * Determines whether a user has view access to a specific private field on the
 * resume profile.
 *
 * The profile owner always has access, while for the other view access is
 * denied by default. Modules can alter the access with
 * recruiter_resume_private_fields_view_access().
 *
 * @param $field
 *   The private field info for which the access should be determined.
 * @param $profile
 *   The resume profile the field is attached to.
 * @param $account
 *   The current acting user.
 * @return boolean
 *   Whether view access is allowed or not.
 *
 * @see hook_recruiter_resume_private_fields_view_access()
 */
function recruiter_resume_private_fields_view_access($field, $profile, $account) {
  // Always grant view access to the profile owner.
  if ($account->uid == $profile->uid) {
    return TRUE;
  }

  // Allow modules to grant / deny access for all other cases.
  $access = module_invoke_all('recruiter_resume_private_fields_view_access', $field, $profile, $account);

  // Only grant access if at least one module granted access and no one denied
  // access.
  if (in_array(FALSE, $access, TRUE)) {
    return FALSE;
  }
  elseif (in_array(TRUE, $access, TRUE)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_field_access().
 */
function recruiter_resume_field_access($op, $field, $entity_type, $profile = NULL, $account = NULL) {
  if ($entity_type == 'profile2' && $op == 'view' && !user_access('administer profiles', $account)) {
    if (in_array($field['field_name'], recruiter_resume_private_fields())) {
      if (!isset($profile)) {
        return FALSE;
      }
      $account = isset($account) ? $account : $GLOBALS['user'];
      if (!recruiter_resume_private_fields_view_access($field, $profile, $account)) {
        return FALSE;
      }
    }
  }
}

/**
 * Defines which text should be displayed to applicants for their private
 * resume fields.
 *
 * Other modules can alter this text in order to adapt it to their functionality
 * (e.g. an application feature may add, that it is visible to those who
 * received your job application).
 *
 * @param $field_name
 *   The Field API's field name.
 *
 * @return
 *   A translatable text that will be displayed on the resume form.
 *
 * @see hook_recruiter_resume_private_fields_info_text_alter().
 */
function recruiter_resume_private_fields_info_text($field_name) {
  $text = t('The content of this field will be private.');
  drupal_alter('recruiter_resume_private_fields_info_text', $text, $field_name);
  return $text;
}

/**
 * Returns a list of fields that are required for a resume to be marked as
 * completed. This list of fields is furthermore used in the Rules condition
 * 'recruiter_resume_complete'.
 *
 * The information can be altered in the admin settings and is then saved in the
 * variable 'recruiter_resume_required_fields'.
 */
function recruiter_resume_required_fields() {
  $defaults = array(
    'field_resume_languages',
    'field_resume_personal_info',
    'field_resume_skills_general',
    'field_resume_skills_it',
    'field_resume_job_preferences',
    'field_resume_education',
  );
  return variable_get('recruiter_resume_required_fields', $defaults);
}

/**
 * Helper function to determine whether the given resume has been completed,
 * based on the required fields.
 * Used in Rules condition 'recruiter_resume_complete'.
 *
 * @param $profile
 *   The resume.
 *
 * @return bool
 *   TRUE if completed.
 */
function recruiter_resume_is_complete($profile) {
  if ($profile && isset($profile->type) && $profile->type == "resume") {
    foreach (recruiter_resume_required_fields() as $field) {
      if (!isset($profile->$field) || empty($profile->$field)) {
        return FALSE;
      }
    }
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_menu().
 */
function recruiter_resume_menu() {
  $items['admin/config/recruiter/resume'] = array(
    'title' => 'Resume',
    'description' => 'Settings for the recruiter resume feature.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('recruiter_resume_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Admin settings form.
 */
function recruiter_resume_settings($form) {
  $field_info = field_info_fields();
  $options = array();
  foreach (field_info_instances('profile2', 'resume') as $key => $field) {
    if ($field_info[$key]['type'] == 'field_collection') {
      $options[$key] = check_plain($field['label']);
    }
  }

  $form['recruiter_resume_private_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Private fields'),
    '#options' => $options,
    '#default_value' => recruiter_resume_private_fields(),
    '#description' => t('Private fields of a resume stay invisible to recruiter user by default. Special modules, like the job application feature, may grant access to the private fields.'),
  );
  $form['recruiter_resume_required_fields'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Required fields'),
    '#options' => $options,
    '#default_value' => recruiter_resume_required_fields(),
    '#description' => t('A list of fields the user has to fill out before the resume is marked as \'visible\'. Changing this setting does not update the state of exisiting resumes.'),
  );
  $form['array_filter'] = array(
    '#type' => 'value',
    '#value' => TRUE,
  );
  return system_settings_form($form);
}
/**
 * Implements hook_admin_paths().
 *
 * Enable the overlay on this paths.
 *
 * @todo: Fix to enable the overlay without wrongly marking the paths to be
 * administrative.
 */
function recruiter_resume_admin_paths() {
  return array(
    'field-collection/*/*/*' => TRUE,
    'field-collection/*/*/view' => FALSE,
  );
}

/**
 * Implements hook_menu_alter().
 */
function recruiter_resume_menu_alter(&$items) {
  // Hide the menu tabs from the resume page.
  $items['resume/%profile2_by_uid/view']['type'] = MENU_CALLBACK;
  $items['resume/%profile2_by_uid/edit']['type'] = MENU_CALLBACK;
  $items['resume/%profile2_by_uid/delete']['type'] = MENU_CALLBACK;
}

/**
 * Implements hook_preprocess_entity().
 */
function recruiter_resume_preprocess_entity(&$variables, $hook) {
  if ($variables['entity_type'] == 'profile2') {
    $profile = $variables['profile2'];
    // Add resume state info.
    if ($profile->type == 'resume' && profile2_access('edit', $profile)) {
      // Add private field info.
      foreach (recruiter_resume_private_fields() as $field_name) {
        // Add resume private info wrapper & suffix.
        if (isset($variables['content'][$field_name])) {
          $variables['content'][$field_name]['#prefix'] = '<div class="private-info-wrapper">' . $variables['content'][$field_name]['#prefix'];
          $variables['content'][$field_name]['#suffix'] .= '</div>';
          $variables['content'][$field_name]['#suffix'] = '<div class="private info">' .  recruiter_resume_private_fields_info_text($field_name) . '</div>'
            . $variables['content'][$field_name]['#suffix'];
        }
      }

      $state = recruiter_resume_get_state($profile);
      $state_message = recruiter_resume_get_state_info($state);

      if (isset($state_message)) {
        $variables['content']['field_resume_state_info'] = $state_message;
      }

      if ($state == 'incomplete') {
        // Add info when required field collection is empty.
        foreach (recruiter_resume_required_fields() as $field_name) {
          if (empty($variables[$field_name]) && isset($variables['content'][$field_name])) {
            $variables['content'][$field_name]['#suffix'] =
              '<div class="missing info">' . t('Required information needs to be completed.') . '</div>'
                . $variables['content'][$field_name]['#suffix'];
          }
        }
      }
    }
    // Order field collections by date.
    if (isset($variables['content']['field_resume_education'])) {
      recruiter_resume_field_collection_order_by_date($variables['content']['field_resume_education'], 'field_resume_time_period');
    }
    if (isset($variables['content']['field_resume_xp'])) {
      recruiter_resume_field_collection_order_by_date($variables['content']['field_resume_xp'], 'field_resume_time_period');
    }

    // Hide label for personal info once it contains data.
    if (!empty($variables['field_resume_personal_info'])) {
      $variables['content']['field_resume_personal_info']['#label_display'] = 'hidden';
    }
  }
}

/**
 * Helper function that sorts field collections according to a value from a date
 * field, starting with the newest one first.
 */
function recruiter_resume_field_collection_order_by_date(&$field_content_array, $date_field) {
  $dates = array();
  foreach (element_children($field_content_array) as $delta) {
    if (isset($field_content_array['#items'][$delta]['value']) && isset($field_content_array[$delta]['entity']['field_collection_item'][$field_content_array['#items'][$delta]['value']])) {
      $fc = $field_content_array[$delta]['entity']['field_collection_item'][$field_content_array['#items'][$delta]['value']];
      if (isset($fc[$date_field]['#items'][0]['value'])) {
        // Take the start date.
         $dates[$delta] = $fc[$date_field]['#items'][0]['value'];
      }
    }
  }
  if (count($dates)) {
    // Reorder $items that are used in field_collection_field_formatter_view().
    $old_items = $field_content_array['#items'];
    unset($field_content_array['#items']);
    arsort($dates);
    foreach ($dates as $delta => $date) {
      $field_content_array['#items'][$delta] = $old_items[$delta];
    }
  }
}

/**
 * Implements hook_profile2_view().
 */
function recruiter_resume_profile2_view($profile, $view_mode, $langcode) {
  global $user;

  // Add email address for contacting the applicant. The email address is taken
  // from the user account and is only visible if the recruiter user has access
  // to the personal info.
  if ($profile->type == 'resume' && !empty($profile->field_resume_personal_info) && $user->uid != $profile->uid) {
    $profile_user = user_load($profile->uid);
    $field_id = $profile->field_resume_personal_info[LANGUAGE_NONE][0]['value'];

    // We imitate the markup of fields so that it has a consistent look.
    $mail_markup =
      '<div class="field mail field-label-inline clearfix"><div class="field-label">' .
        t('Email') . ':&nbsp;</div><div class="field-items"><div class="field-item even">' .
        l($profile_user->mail, 'mailto:' . $profile_user->mail) .
        '</div></div></div>';

    $profile->content['field_resume_personal_info'][0]['entity']['field_collection_item'][$field_id]['field_user_mail'] = array(
      '#markup' => $mail_markup,
      '#weight' => 5,
    );
  }
}


/**
 * Helper function which gets the state from a given profile.
 */
function recruiter_resume_get_state($profile) {
  // The field gets initialized after the profile has been created, thus a value
  // will always be available.
  $states = field_get_items('profile2', $profile, 'field_resume_state');
  return $states[0]['value'];
}

/**
 * Helper function which gets the state info text for a given profile state.
 */
function recruiter_resume_get_state_info($state) {
  $state_classes = "resume-state resume-state-$state";
  switch ($state) {
    case 'visible':
      return t('The resume is <span class="!classes">visible</span> to the public. By clicking the following link you can make it invisible.', array('!classes' => $state_classes));

    case 'hidden':
      return t('The resume was <span class="!classes">manually hidden</span>.', array('!classes' => $state_classes)) . " " . t('By clicking the following link you can make it visible again.');

    case 'auto_hidden':
      return t('The resume was <span class="!classes">automatically hidden</span> due to user inactivity.', array('!classes' => $state_classes)) . t('By clicking the following link you can make it visible again.');

    case 'incomplete':
      return t('The resume is <span class="!classes">incomplete</span>. Please fill out all necessary information.', array('!classes' => $state_classes));
  }
}

/**
 * Implements recruiter_admin_links_alter().
 */
function recruiter_resume_recruiter_admin_links_alter(&$items, $account) {
  if (in_array('applicant', $account->roles)) {
    $profile = profile2_load_by_user($account, 'resume');
    $state_field = field_view_field('profile2', $profile, 'field_resume_state');
    $items[] = l(t('Resume'), 'resume/' . $account->uid) . ' (' . strip_tags(drupal_render($state_field)) .')';
    $items[] = l(t('Resume settings'), 'resume/' . $account->uid . '/edit');
  }
}

/**
 * Implements hook_block_info().
 */
function recruiter_resume_block_info() {
  $blocks['resume_state_info'] = array(
    'info' => t('Current user resume state information'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function recruiter_resume_block_view($delta) {
  switch ($delta) {
    case 'resume_state_info':
      return recruiter_resume_block_resume_state_info_content();
  }
}

/**
 * Resume state info block content.
 *
 * For users that have access to a resume it will show a state info text
 * and the corresponding show/hide resume links.
 */
function recruiter_resume_block_resume_state_info_content() {
  $menu_item = menu_get_item();
  $base = profile2_page_get_base_path(profile2_type_load('resume'));
  if ($menu_item['path'] == $base) {
    // Get resume if user is logged in and has a resume.
    global $user;
    $profile = !empty($user) ? profile2_load_by_user($user, 'resume') : NULL;
  }
  elseif ($menu_item['path'] == $base . '/%') {
    // Get other users resume if we are currently viewing one.
    $p = $menu_item['page_arguments'][0];
    $profile = is_object($p) ? profile2_load_by_user($p->uid, 'resume') : NULL;
  }

  if (!empty($profile) && profile2_access('edit', $profile)) {
    // Get state info text.
    $state = recruiter_resume_get_state($profile);
    $state_info = recruiter_resume_get_state_info($state);

    // Get the hide or show resume link, either of which is available right now.
    $link = rules_link_render('resume_set_hidden', $profile->pid, drupal_get_destination());
    if (empty($link)) {
      $link = rules_link_render('resume_set_visible', $profile->pid, drupal_get_destination());
    }

    return array(
      'subject' => t('Resume @state', array('@state' => $state)),
      'content' => array(
        'body' => array(
          '#theme' => 'recruiter_resume_get_state_info_box',
          '#state' => $state,
          '#state_info' => $state_info,
          '#link' => $link,
        ),
      ),
    );
  }
  return NULL;
}

/**
 * Themes the resume state info block content.
 */
function theme_recruiter_resume_get_state_info_box($variables) {
  return
    '<div class="state-info-box state-info-state-' . $variables['state'] . '">' .
    '<p class="state-info-text">' . $variables['state_info'] . '</p>' .
    '<div class="state-info-link">' . render($variables['link']) . '</div>' .
    '</div>';
}
