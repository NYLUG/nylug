<?php

/**
 * @file
 * Install, update, and uninstall functions for the recruiter_resume module.
 */

/**
 * Implements hook_enable().
 */
function recruiter_resume_enable() {
  // Provide access to the overlay by default, but do not export it, as we would
  // get an unwanted dependcy.
  if (module_exists('overlay')) {
    // First of all ensure that all roles have been installed.
    features_include(TRUE);
    $items = array(
      'recruiter_common' => array(
        'user_role',
      ),
      'recruiter_resume' => array(
        'user_role',
      ),
    );
    _features_restore('enable', $items);
    _features_restore('rebuild', $items);

    $permission = 'access overlay';
    $roles = array(
      'administrator',
      'applicant',
      'content admin',
      'job admin',
      'recruiter',
    );
    foreach ($roles as $role_name) {
      if ($role = user_role_load_by_name($role_name)) {
        user_role_change_permissions($role->rid, array($permission => TRUE));
      }
    }
  }
}

/**
 * Implements hook_unistall().
 */
function recruiter_resume_unistall() {
  variable_del('recruiter_resume_private_fields');
  variable_del('recruiter_resume_required_fields');
}

/**
 * Migrate firstname, lastname data from address field to separate text fields.
 *
 * Implements hook_update_N().
 */
function recruiter_resume_update_7100() {
  $addresses = db_select('field_data_field_resume_address', 'a')
    ->fields('a', array('entity_type', 'bundle', 'deleted', 'entity_id', 'revision_id', 'language', 'delta', 'field_resume_address_first_name', 'field_resume_address_last_name'))
    ->execute();

  foreach ($addresses as $address) {
    $fields = array(
      'entity_type' => $address->entity_type,
      'bundle' => $address->bundle,
      'deleted' => $address->deleted,
      'entity_id' => $address->entity_id,
      'revision_id' => $address->revision_id,
      'language' => $address->language,
      'delta' => $address->delta,
    );

    recruiter_resume_update_7100_insert(
      'field_data_field_resume_firstname',
      $fields + array('field_resume_firstname_value' => $address->field_resume_address_first_name)
    );
    recruiter_resume_update_7100_insert(
      'field_revision_field_resume_firstname',
      $fields + array('field_resume_firstname_value' => $address->field_resume_address_first_name)
    );

    recruiter_resume_update_7100_insert(
      'field_data_field_resume_lastname',
      $fields + array('field_resume_lastname_value' => $address->field_resume_address_last_name)
    );
    recruiter_resume_update_7100_insert(
      'field_revision_field_resume_lastname',
      $fields + array('field_resume_lastname_value' => $address->field_resume_address_last_name)
    );
  }
  return t('Resume firstname and lastname extracted from address field.');
}

function recruiter_resume_update_7100_insert($table, $fields) {
  // Only insert if value doesn't exist.
  $query = db_select($table, 'f')
    ->fields('f', array('entity_id'))
    ->condition('entity_id', $fields['entity_id'], '=')
    ->execute();
  if ($query->rowCount() == 0) {
    db_insert($table)->fields($fields)->execute();
  }
}

/**
 * Migrates degree level (list text) to new term reference field.
 */
function recruiter_resume_update_7101() {
  $field = field_info_field('field_resume_degree_level_term');
  if (!$field) {
    throw new DrupalUpdateException('Exception: New degree level term field (field_resume_degree_level_term) has not yet been imported. Check your resume feature first, clear cache and revert the fields if necessary.');
  }
  // Values from the old list field.
  $old_values = array(
    'high_school' => 'High school',
    'bachelor' => 'Bachelor\'s degree',
    'master' => 'Master\'s degree',
    'doctor' => 'Doctorate',
    'other' => 'Other',
  );
  // Check if vocabulary has already been inserted, otherwise just create a new
  // one.
  $voc = taxonomy_vocabulary_machine_name_load('degree_level');
  if (!$voc) {
    $voc->name = 'Degree level';
    $voc->machine_name = 'degree_level';
    taxonomy_vocabulary_save($voc);
  }

  // Insert terms into the new vocabulary.
  $new_terms = array();
  foreach ($old_values as $key => $value) {
    $term = new stdClass();
    $term->name = $value;
    $term->vid = $voc->vid;
    taxonomy_term_save($term);
    $new_terms[$key] = $term;
  }

  // Query the old degree level values.
  $levels = db_select('field_data_field_resume_edu_degree_level', 'f')
    ->fields('f', array('entity_type', 'bundle', 'deleted', 'entity_id', 'revision_id', 'language', 'delta', 'field_resume_edu_degree_level_value'))
    ->execute();

  // Insert new values.
  foreach ($levels as $level) {
    $term = $new_terms[$level->field_resume_edu_degree_level_value];
    if ($term) {
      unset($level->field_resume_edu_degree_level_value);
      $level->field_resume_degree_level_term_tid = $term->tid;
      db_insert('field_data_field_resume_degree_level_term')->fields((array) $level)->execute();
    }
  }
  return t('Data has been migrated to new degree level term field (field_resume_degree_level_term). The old field (field_resume_edu_degree_level) can now be deleted');
}
