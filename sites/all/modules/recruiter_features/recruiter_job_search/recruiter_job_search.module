<?php

include_once('recruiter_job_search.features.inc');


/**
 * Implements hook_form_FORM_ID_alter().
 */
function recruiter_job_search_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  // Change the region filter from a text field to an autocomplete field. The
  // Search API does not know anything about the regions_all field and
  // furthermore Views only adds the autocomplete filter option to the db
  // backend, so we have to do that on our own.
  if (isset($form_state['view']) && $form_state['view']->name == "job_search" && isset($form['field_job_region_parents_all'])) {
    $voc = taxonomy_vocabulary_machine_name_load("geography");
    if ($voc) {
      $term_field_name = 'field_job_region';
      $form['field_job_region_parents_all']['#autocomplete_path'] = 'taxonomy/autocomplete/' . $term_field_name;
      $form['field_job_region_parents_all']['#element_validate'] = array('recruiter_job_search_region_autocomplete_validate');
    }
  }
}

/**
 * Validation function that maps the term name from the autocomplete field to
 * term ids.
 */
function recruiter_job_search_region_autocomplete_validate($element, &$form_state, $form) {
  if (!empty($element['#value'])) {
    $voc = taxonomy_vocabulary_machine_name_load("geography");
    $typed_terms = drupal_explode_tags($element['#value']);
    foreach ($typed_terms as $typed_term) {
      if ($possibilities = taxonomy_term_load_multiple(array(), array('name' => trim($typed_term), 'vid' => $voc->vid))) {
        // This is a single filter, exit after the first match.
        $term = array_pop($possibilities);
        $form_state['values'][$element['#name']] = $term->tid;
        break;
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function recruiter_job_search_theme() {
  return array(
    'recruiter_job_search_total_count' => array(
      'variables' => array('total_count' => NULL),
    ),
  );
}

/**
 * Implements hook_node_update().
 */
function recruiter_job_search_node_update($node) {
  recruiter_job_serach_total_count_block_cache_clear($node);
}

/**
 * Implements hook_node_insert().
 */
function recruiter_job_search_node_insert($node) {
  recruiter_job_serach_total_count_block_cache_clear($node);
}

/**
 * Implements hook_block_info().
 */
function recruiter_job_search_block_info() {
  return array(
    'job_total_count' => array(
      'info' => t('Total job count'),
      'cache' => DRUPAL_CACHE_CUSTOM,
      'description' => t('Displays total number of published jobs. Block is cached for all users. If job count is influenced by node access contraints, then do not use it.')
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function recruiter_job_search_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'job_total_count':
      $block = recruiter_job_serach_total_count_block_content();
      break;
  }
  return $block;
}

/**
 * Returns block render array for total job count.
 */
function recruiter_job_serach_total_count_block_content() {
  // We manually cache the block until a job has been inserted or updated.
  // DRUPAL_CACHE_GLOBAL is not as flexible and does not work if a node access
  // module is activated (job application feature).
  $cid = 'recruiter_job_search_total_count';
  $cache = cache_get($cid);
  if (!$cache) {
    $block = array(
      'subject' => '',
      'content' => array(
        '#theme' => 'recruiter_job_search_total_count',
        '#total_count' => recruiter_job_search_total_count(),
      )
    );
    cache_set($cid, $block);
  }
  else {
    $block = $cache->data;
  }
  return $block;
}

/**
 * Helper function that clears the total job count cache.
 */
function recruiter_job_serach_total_count_block_cache_clear($node) {
  if (in_array($node->type, recruiter_job_content_types())) {
    cache_clear_all('recruiter_job_search_total_count', 'cache');
  }
}

/**
 * Helper function that returns the total number of published jobs.
 */
function recruiter_job_search_total_count() {
  $view = views_get_view('job_search');
  $view->set_display('default');
  $view->execute();
  return $view->total_rows;
}

/**
 * Themes total number of job text.
 */
function theme_recruiter_job_search_total_count($variables) {
  return t('<a href="!url">@count jobs</a> available', array('@count' => $variables['total_count'], '!url' => url('search/job')));
}
