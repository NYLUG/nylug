<?php

include_once('recruiter_job.features.inc');

/**
 * Implements hook_theme().
 */
function recruiter_job_theme() {
  return array(
    // Register the template specific for the job per template content type.
    'node__job_per_template__slim' => array(
      'render element' => 'elements',
      'template' => 'node--job_per_template--slim',
    ),
    // Register the template specific for the job per template content type.
    'node__job__teaser' => array(
      'render element' => 'elements',
      'template' => 'node--job--teaser',
    ),
  );
}

/**
 * Implements hook_preprocess_TEMPLATE().
 *
 * @see recruiter_common_preprocess_page()
 */
function recruiter_job_preprocess_node(&$node) {
  if (in_array($node['type'], recruiter_job_content_types())) {
    // Add a generic node-job class for any job content type.
    $node['classes_array'][] = 'node-job';

    if ($node['view_mode'] == 'teaser') {
      // Check if the values are already set by other modules. If not, init them
      // with our configuration.
      $node['teaser_organization'] = isset($node['teaser_organization']) ? $node['teaser_organization'] : recruiter_job_teaser_field_value($node['node'], 'field_job_organization');
      $node['teaser_location'] = isset($node['teaser_location']) ? $node['teaser_location'] : recruiter_job_teaser_field_value($node['node'], 'field_job_location');
      $node['teaser_terms'] = isset($node['teaser_terms']) ? $node['teaser_terms'] : recruiter_job_teaser_terms($node['node']);
      $node['theme_hook_suggestions'][] = 'node__job__teaser';

      // Group rules links.
      $node['rules_links'] = array(
        '#theme' => 'item_list',
        '#items' => array(),
        '#attributes' => array('class' => 'rules-links'),
      );
      foreach ($node['content'] as $key => $element) {
        if (strpos($key, 'rules_links_') === 0) {
          $node['rules_links']['#items'][$key] = $element['#markup'];
          unset($node['content'][$key]);
        }
      }
    }
    else {
      // Add a theme suggestion job nodes in case 'slim' mode is enabled.
      if (context_isset('context', 'recruiter_render_slim')) {
        $node['theme_hook_suggestions'][] = 'node__' . $node['type'] . '__slim';
      }
      else {
        $node['content'] = array('job_link' => $job_link_content) + $node['content'];
      }
    }
  }
}

/**
 * Helper function that wraps a single value form a node property (e.g. field)
 * in a span. This is used for initializing the job teaser variables.
 */
function recruiter_job_teaser_field_value($node, $property_name, $sanitze = TRUE) {
  $node_wrapper = entity_metadata_wrapper('node', $node);
  try {
    if ($node_wrapper->{$property_name}->value() != NULL) {
      $value = $sanitze ? check_plain($node_wrapper->{$property_name}->value()) : $node_wrapper->{$property_name}->value();
      return '<span class="' . drupal_html_class($property_name) . '">' . $value . '</span>';
    }
  }
  catch (Exception $e) {
    // Something went wrong (e.g. the property does not exist). Catch the
    // exception, return an empty string and continue working.
  }
  return '';
}

/**
 * Returns a concatenated list of job teaser term names as string.
 *
 * @param array $node
 *   The job node which contains the terms.
 * @param array $taxonomy_fields
 *   (optional) A list of taxonomy fields to take terms from.
 *   Defaults to field_job_occupational_field, field_job_of_study,
 *   field_job_skills_general and field_job_skills_it.
 * @param int $max_items
 *   (optional) The maximum number of items to include in the string.
 *   Defaults to 5.
 * @param string $separator
 *   (optional) The string separator used for concatenation of the terms.
 *   Defaults to " | ".
 * @return string
 *   A string containing the concatenated term names.
 */
function recruiter_job_teaser_terms($node, $taxonomy_fields = NULL, $max_items = 5, $separator = " | ") {
  // Set default term fields.
  if ($taxonomy_fields == NULL) {
    $taxonomy_fields = array(
      'field_job_occupational_field',
      'field_job_of_study',
      'field_job_skills_general',
      'field_job_skills_it'
    );
  }

  // Prepare terms.
  $teaser_terms = array();

  // Collect terms ids first and then execute a multi load.
  $tids = array();
  foreach ($taxonomy_fields as $field) {
    if (isset($node->{$field}) && $items = field_get_items('node', $node, $field)) {
      foreach ($items as $item) {
        $tids[] = $item['tid'];
        if (count($tids) >= $max_items) {
          // End the outer term collecting loop if maximum items are reached.
          break 2;
        }
      }
    }
  }
  if (count($tids)) {
    foreach (taxonomy_term_load_multiple($tids) as $term) {
      $teaser_terms[] = check_plain($term->name);
    }
  }
  // Return comma separated terms.
  return implode($separator, $teaser_terms);
}

/**
 * Implements hook_preprocess_TEMPLATE().
 */
function recruiter_job_preprocess_page(&$variables) {
  // In case we are in the job slim mode, we are going to output an iframe for
  // external jobs and jobs per file. For this purpose we add the variable
  // "frame_url" which contains the url the web resource.
  if (context_isset('context', 'recruiter_render_slim') && arg(0) == 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    if ($node && $frame_url = recruiter_job_get_node_frame_link($node)) {
      $variables['frame_url'] = $frame_url;
    }
  }
}

/**
 * Returns the job url that can be used within the job frame.
 */
function recruiter_job_get_node_frame_link($node) {
  if ($node->type == "job_per_link") {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    $link_field = $node_wrapper->field_job_link->value();
    // Sanitize link URL before printing it.
    $link_field['url'] = check_url($link_field['url']);
    return theme('link_formatter_link_plain', array('element' => $link_field));
  }
  elseif ($node->type == "job_per_file") {
    $node_wrapper = entity_metadata_wrapper('node', $node);
    return $node_wrapper->field_job_file->file->url->value();
  }
}

/**
 * Defines all job content types.
 */
function recruiter_job_content_types() {
  return array_keys(recruiter_job_node_info());
}

/**
 * Implements hook_entity_property_info_alter().
 */
function recruiter_job_entity_property_info_alter(&$info) {
  foreach (recruiter_job_content_types() as $type) {
    $properties = &$info['node']['bundles'][$type]['properties'];
    $properties['job_url'] = array(
      'label' => t('Job URL'),
      'description' => t('The URL for viewing the job ad.'),
      'getter callback' => 'recruiter_job_get_url',
      'type' => 'uri',
      'entity views field' => TRUE,
    );
  }
}

/**
 * Returns the URL for viewing a job.
 */
function recruiter_job_get_url($node) {
  $url = url("node/$node->nid", array('absolute' => TRUE));
  // Never try to output a job per link under https as it contains an frame to
  // a site which maybe does not use ssl.
  if ($node->type == "job_per_link" && substr($url, 0, 5) === 'https') {
    $url = substr_replace($url, 'http', 0, 5);
  }
  return $url;
}
