<?php
/**
 * @file
 * Code for the recruiter_job_application feature.
 */

include_once 'recruiter_job_application.features.inc';


/**
 * Implements hook_form_FORM_ID_alter().
 */
function recruiter_job_application_form_context_admin_node_form_wrapper_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node']) && $form['#node']->type == "job_application") {
    $job_id = isset($form['#node']->field_job_application_job_ref[LANGUAGE_NONE][0]['target_id']) ? $form['#node']->field_job_application_job_ref[LANGUAGE_NONE][0]['target_id'] : FALSE;
    if ($job_id) {
      $job = node_load($job_id);
      if (!$job) {
        return;
      }
      // Add a link to the job and imitate the field structure so that it has
      // a consistent look in most cases.
      $markup = '<div class="field field-job-application-job-ref field-label-inline clearfix"><div class="field-label">' .
        t('Job') . ':&nbsp;</div><div class="field-items"><div class="field-item even">' .
        l($job->title, 'node/' . $job->nid) .
        '</div></div></div>';

      $form['job_info'] = array(
        '#markup' => $markup,
        '#weight' => -99,
      );

      // Rename the save button.
      $form['actions']['submit']['#value'] = t('Send application');
    }
  }
}

/**
 * Implements hook_preprocess_HOOK.
 */
function recruiter_job_application_preprocess_node(&$variables) {
  if ($variables['type'] == 'job_application') {
    $profile = profile2_load_by_user($variables['uid'], 'resume');
    if (isset($profile) && recruiter_resume_get_state($profile) == 'visible') {
      // Add the 'View resume' link.
      $personal_info_field = field_collection_item_load($profile->field_resume_personal_info[$variables['language']][0]['value']);
      $first_name = $personal_info_field->field_resume_firstname[$variables['language']][0]['value'];
      $last_name = $personal_info_field->field_resume_lastname[$variables['language']][0]['value'];

      $link = l("$first_name $last_name", 'resume/' . $variables['uid']);
      $variables['submitted'] = t('Submitted by !user_link on %date', array('!user_link' => $link, '%date' => format_date($variables['created'])));
      $variables['content']['view_resume'] = array(
        '#markup' => l(t('View resume'), 'resume/' . $variables['uid']),
      );

      // Use the colorbox to display the job.
      $job = node_load($variables['field_job_application_job_ref'][0]['target_id']);
      $job_url = recruiter_job_get_url($job);
      $variables['content']['field_job_application_job_ref'][0]['#markup'] = '<div class="job-link"><a href="' . check_plain($job_url) . '" class="recruiter-job-link" rel="nofollow">' . check_plain($job->title) . '</a></div>';
    }
    else {
      $variables['submitted'] = t('Submitted on %date', array('%date' => format_date($variables['created'])));
    }
  }
}

/**
 * Returns TRUE if threre are job applications for a certain job.
 *
 * @param $applicant
 *   Either the uid of an applicant user or the user object itself.
 *
 * @param $node_id
 *   The node id of a $job offering.
 *
 * @return bool
 *   TRUE if there is an application for this job and applicant, else FALSE.
 */
function recruiter_job_application_exisits_for_job($applicant, $node_id) {
  $applications_exists = &drupal_static(__FUNCTION__);

  $applicant = is_object($applicant) ? $applicant : user_load($applicant);
  if (!isset($applications_exists[$applicant->uid])) {
    $query = db_select('field_data_field_job_application_job_ref', 'jr');
    $query->addField('jr', 'field_job_application_job_ref_target_id');
    $query->innerJoin('node', 'n', 'jr.entity_id = n.nid');
    $query->condition('n.uid', $applicant->uid);
    // Store all the results in to the cache, so we don't have retrieve all
    // nodes again later.
    $applications_exists[$applicant->uid] = $query->execute()->fetchCol();
  }

  return in_array($node_id->nid, $applications_exists[$applicant->uid]) ;
}

/**
 * Returns job applications for a certain applicant and a certain job.
 *
 * @param $applicant
 *   Either the uid of an applicant user or the user object itself.
 *
 * @param $job
 *   The job node id of a job offering.
 *
 * @return array|NULL
 *   An array of node ids from job applications or NULL if first argument is not
 *   an applicant or there are no results.
 */
function recruiter_job_application_for_job($applicant, $job) {
  $applications = &drupal_static(__FUNCTION__);

  $user = is_object($applicant) ? $applicant : user_load($applicant);
  if (!in_array('applicant', $user->roles)) {
    return NULL;
  }

  if (empty($applications[$applicant->uid][$job])) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node');
    $query->propertyCondition('uid', $user->uid, '=');
    $query->fieldCondition('field_job_application_job_ref', 'target_id', $job);
    $query_result = $query->execute();

    if (empty($query_result)) {
      return NULL;
    }
    $applications[$applicant->uid][$job] = array_keys($query_result['node']);
  }

  return $applications[$applicant->uid][$job];
}

/**
 * Returns job applications for a certain applicant and a certain recruiter.
 *
 * @param $applicant
 *   Either the uid of an applicant user or the user object itself.
 *
 * @param $recruiter
 *   Either the uid of a recruiter user or the user object itself.
 *
 * @return array | NULL
 *   An array of node ids from job applications or NULL if first argument not an
 *   applicant and second not a recruiter or there were no results.
 */
function recruiter_job_application_for_recruiter($applicant, $recruiter) {
  $applications = &drupal_static(__FUNCTION__);

  $applicant = is_object($applicant) ? $applicant : user_load($applicant);
  $recruiter = is_object($recruiter) ? $recruiter : user_load($recruiter);

  if (!in_array('applicant', $applicant->roles) && !in_array('recruiter', $recruiter->roles)) {
    return NULL;
  }

  if (!isset($applications[$applicant->uid][$recruiter->uid])) {
    $query = db_select('field_data_field_job_application_job_ref', 'jr');
    $query->addField('jr', 'entity_id');
    $query->innerJoin('node', 'nr', 'jr.field_job_application_job_ref_target_id = nr.nid');
    $query->innerJoin('node', 'na', 'jr.entity_id = na.nid');
    $query->condition('na.uid', $applicant->uid);
    $query->condition('nr.uid', $recruiter->uid);
    $applications[$applicant->uid][$recruiter->uid] = $query->execute()->fetchCol();
    // Initialize the cache variable so that empty values get cached to.
    if (empty($applications[$applicant->uid][$recruiter->uid])) {
      $applications[$applicant->uid][$recruiter->uid] = NULL;
    }
  }

  return $applications[$applicant->uid][$recruiter->uid];
}

/**
 * Implements hook_recruiter_resume_private_fields_view_access().
 */
function recruiter_job_application_recruiter_resume_private_fields_view_access($field, $profile, $account) {
  $applications = recruiter_job_application_for_recruiter($profile->uid, $account->uid);
  if (!empty($applications)) {
    return TRUE;
  }
}

/**
 * Implements hook_recruiter_resume_private_fields_info_text_alter().
 */
function recruiter_job_application_recruiter_resume_private_fields_info_text_alter(&$text, $field_name) {
  $text .= ' ' . t('It can only be seen by you and recruiters you sent applications to.');
}

/**
 * Implements recruiter_admin_links_alter().
 */
function recruiter_job_application_recruiter_admin_links_alter(&$items, $account) {
  if (in_array('applicant', $account->roles)) {
    $items[] = l(t('Sent applications'), 'applicant/applications/' . $account->uid);
  }
  if (in_array('recruiter', $account->roles)) {
    $items[] = l(t('Received applications'), 'recruiter/applications/' . $account->uid);
  }
}
