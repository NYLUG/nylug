<?php

class RulesAutotagTestCase extends DrupalWebTestCase {
  protected $vocabulary, $term1, $term2, $term3, $term4, $text;

  public static function getInfo() {
    return array(
      'name' => 'Rules Autotag Test',
      'description' => "Tests the 'Extract tags' action and auto tagging functions.",
      'group' => 'Rules Autotag',
    );
  }

  public function setUp() {
    parent::setUp('rules_autotag');

    // Create vocabulary.
    $this->vocabulary = new stdClass();
    $this->vocabulary->name = $this->randomName();
    $this->vocabulary->description = $this->randomName();
    $this->vocabulary->machine_name = drupal_strtolower($this->randomName());
    $this->vocabulary->help = '';
    $this->vocabulary->weight = mt_rand(0, 10);
    taxonomy_vocabulary_save($this->vocabulary);

    // Create terms.
    $this->term1 = new stdClass();
    $this->term1->name = "Term1";
    $this->term1->vid = $this->vocabulary->vid;
    taxonomy_term_save($this->term1);
    
    $this->term2 = new stdClass();
    $this->term2->name = "Term2";
    $this->term2->vid = $this->vocabulary->vid;
    taxonomy_term_save($this->term2);
    
    $this->term3 = new stdClass();
    $this->term3->name = "Term3";
    $this->term3->vid = $this->vocabulary->vid;
    taxonomy_term_save($this->term3);
    
    $this->term4 = new stdClass();
    $this->term4->name = "Compound name";
    $this->term4->vid = $this->vocabulary->vid;
    taxonomy_term_save($this->term4);

    $this->term5 = new stdClass();
    $this->term5->name = "Word-with-dash";
    $this->term5->vid = $this->vocabulary->vid;
    taxonomy_term_save($this->term5);
    
    // Define text.
    $this->text = "adsf werqwer Term1 term2 xycvyx Compound name Word-with-dash";
  }

  public function testTagging() {
     $action = rules_action('rules_autotag_extract');
     list($terms) = $action->execute($this->text, $this->vocabulary);

     $tids = array();
     foreach ($terms as $term) {
       $tids[] = $term->tid; 
     }

     $this->assertTrue(in_array($this->term1->tid, $tids), 'Term found.');
     $this->assertTrue(in_array($this->term2->tid, $tids), 'Lower term name found.');
     $this->assertFalse(in_array($this->term3->tid, $tids), 'Term correctly not found.');
     $this->assertTrue(in_array($this->term4->tid, $tids), 'Compound term name found.');
     $this->assertTrue(in_array($this->term5->tid, $tids), 'Term name with dashes found.');

     $this->assertEqual(rules_autotag_clean_text(' test '), 'test', 'Input text is trimmed before processing.');
     $this->assertEqual(rules_autotag_clean_text('<![CDATA[test]]>'), 'test', 'CDATA tags get stripped correctly');

     $this->assertEqual(rules_autotag_split_text('1234 Test (XY)'), array('1234', 'Test', 'XY'), 'No empty strings in splitted text array.');
     $this->assertEqual(array_values(rules_autotag_split_text('"green cars"')), array('green', 'cars'), 'Quotes get splitted out correctly.');
     $this->assertEqual(rules_autotag_split_text('änderung macht spaß?'), array('änderung', 'macht', 'spaß'), 'Words with German umlauts get splitted correctly.');
     $this->assertEqual(rules_autotag_split_text(rules_autotag_clean_text(
       '<strong>Location</strong> <br/>Vienna<br /><strong>Start</strong> <br/>asap')),
       array('location', 'vienna', 'start', 'asap'),
       'Words separated by HTML tags get splittet correctly.'
     );
     $this->assertEqual(rules_autotag_split_text(rules_autotag_clean_text(
       '<h1>Hello</h1>Body text here.')),
       array('hello', 'body', 'text', 'here'),
       'Words immediately after HTML tags get splittet correctly.'
     );
     $this->assertEqual(rules_autotag_split_text(rules_autotag_clean_text(
       '<![CDATA[<h1>Hello</h1>Body text here.]]>')),
       array('hello', 'body', 'text', 'here'),
       'HTML in CDATA wrapper gets split up correctly.'
     );

     // Test that parts of a term name do not yield results.
     $tids = rules_autotag_extract('Compound', $this->vocabulary);
     $this->assertTrue(empty($tids), 'Text containing a part of a term has no results.');

     // Test exact matching.
     $tid = rules_autotag_exact_match('Term1 test', $this->vocabulary);
     $this->assertFalse($tid, 'Text containing the word is no exact match.');
     $tid = rules_autotag_exact_match('Term1 ', $this->vocabulary);
     $this->assertEqual($tid, $this->term1->tid, 'Exact match found.');
     $tid = rules_autotag_exact_match('Compound', $this->vocabulary);
     $this->assertFalse($tid, 'Text containing a part of a term is no exact match.');
  }
}
